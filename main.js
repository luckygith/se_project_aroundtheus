!function(){"use strict";const e={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:"modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error"};class t{constructor(e,t,n){let{name:s,link:o}=e;this._name=s,this._link=o,this._cardSelector=t,this._handleImageClick=n}_setEventListeners(){this._likeButton.addEventListener("click",this._handleLikeIcon),this._deleteButton.addEventListener("click",this._handleDeleteCard),console.log(this._cardImageElement),this._cardImageElement.addEventListener("click",(()=>this._handleImageClick({name:this._name,link:this._link})))}_handleLikeIcon=()=>{this._likeButton.classList.toggle("cards__like-button_active")};_handleDeleteCard=()=>{this._element.remove(),this._element=null};getView(){return this._element=document.querySelector(this._cardSelector).content.querySelector(".cards__list-item").cloneNode(!0),this._likeButton=this._element.querySelector(".cards__like-button"),this._deleteButton=this._element.querySelector(".cards__delete-button"),this._cardTitleElement=this._element.querySelector(".cards__title"),this._cardImageElement=this._element.querySelector(".cards__image"),this._cardTitleElement.textContent=this._name,this._cardImageElement.src=this._link,this._cardImageElement.alt=this._name,this._setEventListeners(),this._element}}class n{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._element=t}_setEventListeners(){this._submitButton=this._element.querySelector(".modal__button"),this._inputElements=Array.from(this._element.querySelectorAll(this._inputSelector)),this._disableButton(),this._inputElements.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this.toggleButtonState()}))}))}resetValidation(){this.toggleButtonState(),this._inputElements.forEach((e=>{this._hideInputError(e)}))}_showInputError(e,t){const n=this._element.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),n.textContent=t,n.classList.add(this._errorClass)}_hideInputError(e){const t=this._element.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass)}_checkInputValidity(e){if(!e.validity.valid)return this._showInputError(e,e.validationMessage);this._hideInputError(e)}_hasInvalidInput(e){return!e.every((e=>e.validity.valid))}_disableButton(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}_enableButton(){this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1}toggleButtonState(){this._hasInvalidInput(this._inputElements)?this._disableButton():this._enableButton()}enableValidation(){this._element.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}}class s{constructor(e){this._popupElement=document.querySelector(e),this._handleEscapeClose=this._handleEscapeClose.bind(this),this._closeButton=this._popupElement.querySelector(".modal__close"),this._closeModalOnClick=this._closeModalOnClick.bind(this),this._handleModalBackgroundClick=this._handleModalBackgroundClick.bind(this)}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscapeClose),document.addEventListener("click",this._handleModalBackgroundClick),this._closeButton.addEventListener("click",this._closeModalOnClick)}close(){document.removeEventListener("keydown",this._handleEscapeClose),document.removeEventListener("click",this._handleModalBackgroundClick),this._closeButton.removeEventListener("click",this._closeModalOnClick),this._popupElement.classList.remove("modal_opened")}_handleEscapeClose(e){"Escape"===e.key&&this.close()}_handleModalBackgroundClick(e){e.target===this._popupElement&&this.close()}_closeModalOnClick(){this.close()}}class o extends s{constructor(t,n){super(t),this._popupForm=this._popupElement.querySelector(".modal__form"),this._handleFormSubmit=n,this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector}open(){super.open(),this._popupForm.addEventListener("submit",this._handleFormSubmit)}close(){super.close(),this._popupForm.removeEventListener("submit",this._handleFormSubmit),this._popupForm.reset()}_getInputValues(){const e={};return this._popupForm.querySelectorAll(this._inputSelector).forEach((t=>{e[t.name]=t.value})),e}_handleFormSubmit(e){e.preventDefault();const t=this._getInputValues();this._handleFormSubmit(t),this.close()}}const i=document.querySelector("#profile-add-button"),l=document.querySelector("#profile-edit-button"),r=(document.querySelector(".profile__title "),document.querySelector(".profile__description"),document.querySelector("#profile-title-input")),a=document.querySelector("#profile-description-input"),c=(document.querySelector(".cards__list-item"),document.querySelector(".modal__image")),u=document.querySelector("#card-title-input"),d=document.querySelector("#card-url-input"),m=document.querySelector("#profile-edit-modal"),_=m.querySelector(".modal__form_profile"),h=document.querySelector("#add-card-modal"),p=(document.querySelector(".cards__list"),document.querySelector("#add-card-form")),E=new class extends s{constructor(e){super(e),this._modalImage=document.querySelector(".modal__image"),this._modalText=document.querySelector(".modal__text")}open(e){let{name:t,link:n}=e;this._modalImage.alt=t,this._modalImage.src=n,this._modalText.textContent=t,super.open()}}("#preview-image-modal"),S=new n(e,_),k=new class{constructor(e,t){let{items:n,renderer:s}=e;this._items=n,this._renderer=s,this._container=document.querySelector(t)}renderItems(){this._items.forEach((e=>{const t=this._renderer(e);this.addItem(t)}))}addItem(e){this._container.prepend(e)}}({items:[{name:"Yosemite Valley",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/yosemite.jpg"},{name:"Lake Louise",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lake-louise.jpg"},{name:"Bald Mountians",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/bald-mountains.jpg"},{name:"Latemar",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/latemar.jpg"},{name:"Vanoise National Park",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/vanoise.jpg"},{name:"Lago di Braies",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lago.jpg "}],renderer:b},".cards__list");k.renderItems();const g=new o("#profile-edit-modal",(function(){const e=r.value,t=a.value;v.setUserInfo({name:e,description:t}),g.close()}));console.log(m);const v=new class{constructor(e){let{titleSelector:t,occupationSelector:n}=e;this._profileTitleElement=document.querySelector(t),this._profileDescriptionElement=document.querySelector(n)}getUserInfo(){return{name:this._profileTitleElement.textContent,description:this._profileDescriptionElement.textContent}}setUserInfo(e){let{name:t,description:n}=e;console.log("setUSER WORKING"),this._profileTitleElement.textContent=t,this._profileDescriptionElement.textContent=n}}({titleSelector:".profile__title",occupationSelector:".profile__description"}),y=new o("#add-card-modal",(function(e){const t=b({name:u.value,link:d.value});k.addItem(t),y.close()}));console.log(h);const f=new n(e,p);function C(e){c.alt=e.name,c.src=e.link,modalText.textContent=e.name,E.open(e)}function b(e){return new t(e,"#card-template",C).getView()}f.enableValidation(),S.enableValidation(),l.addEventListener("click",(()=>{f.resetValidation();const{name:e,description:t}=v.getUserInfo();r.value=e,a.value=t,g.open()})),i.addEventListener("click",(()=>{y.open(),f.resetValidation()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,